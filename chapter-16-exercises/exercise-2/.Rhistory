# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, y = price, color = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) +
geom_col(mapping = aes(x = cut, y = price, color = clarity))
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = price))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds) +
boxplot(x = color, y = price)
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds) +
boxplot(mapping = aes(x = color, y = price))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10() +
scale_x_log10()
diamonds_sample <- sample_n(diamonds, 1000)
nrow(diamonds)
diamonds_sample <- sample_n(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
?sample_n
diamonds_sample <- sample_n(diamonds, 1000)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library("ggplot2")
library("dplyr")
diamonds_sample <- sample_n(diamonds, 1000)
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_y_log10() +
scale_x_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "clarity") +
scale_color_brewer(palette = "Purples", direction = -1)
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = clarity) +
scale_color_brewer(palette = "Purples", direction = -1)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(-cut)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(-cut)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(-clarity)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(-clarity)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(-clarity)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = color)) +
facet_wrap(~clarity)
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = clarity) +
scale_color_brewer(palette = "Purples", direction = ~1)
