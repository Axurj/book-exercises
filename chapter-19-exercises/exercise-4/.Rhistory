# Load the `shiny` package
library("shiny")
runApp()
# Exercise 2: a basic Shiny app
# Load the `shiny` package
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my_ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "price", label = "Price", min = 0, value = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", min = 1, value = 1),
# The word "Cost", strongly bolded
p(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
my_server <- function(input_list, output_list){
output_list$message <- renderText({
greeting <- paste("Hello", input_list$user_name)
})
}
# Create a new `shinyApp()` using the above ui and server
runApp()
runApp()
# Load the `shiny` package
library("shiny")
runApp()
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
runApp()
my_ui = navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel,
)
setwd("~/Desktop/book-exercises/chapter-19-exercises/exercise-4")
growth_panel <- tabPanel(
title = "Growth Chart",
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel("Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# Your `sidebar_content`
sidebar_content,
# Your `main_content`
main_content,
)
)
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100, value = c(0, 100))
)
# Load libraries so they are available
library("shiny")
# We'll begin by defining some of the UI elements as variables
# This helps keep the code organized and easier to debug
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
# A `titlePanel()` with the text "Income Inequality"
title = "Introduction",
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html", "(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p(strong("wow"))
)
# Next, we'll define a few UI elements to render in our second panel
# Define a variable `sidebar_content` as a `sidebarPanel()` UI element
# containing the following information:
sidebar_content <- sidebarPanel(
# A `sliderInput()` for the 'percentile' value, labeled "Income Percentile".
# This slider should let the user pick a range between 0 and 100
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100, value = c(0, 100))
)
# Define a variable `main_content` as a `mainPanel()` UI element
# containing the following information:
main_content <- mainPanel(
# A `plotOutput()` element showing the 'plot' output (defined in the server)
plotOutput(outputId = "plot"),
# A paragraph with a hyperlink to the data source
# http://gabriel-zucman.eu/usdina/
p("Data From", a(href = "http://gabriel-zucman.eu/usdina/"))
)
# Define a variable `growth_panel` for your second page. It should be a
# `tabPanel()` with a title "Growth Chart" to represent the second tab.
# This layout will contain the following elements:
growth_panel <- tabPanel(
title = "Growth Chart",
# A `titlePanel()` with the text "Income growth 1980-2014"
titlePanel("Income growth 1980-2014"),
# A `sidebarLayout()` to create two columns.
# The sidebar layout will contain elements:
sidebarLayout(
# Your `sidebar_content`
sidebar_content,
# Your `main_content`
main_content,
)
)
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
my_ui = navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel,
)
my_ui = navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel,
)
runApp()
ui = navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel,
)
ui = navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel
)
ui <- navbarPage(
# - Your `intro_panel`
title = "Income Inequality",
# - Your `growth_panel`
intro_panel,
growth_panel
)
runApp()
# Load libraries so they are available
library("shiny")
runApp()
# Define a variable `intro_panel` for your first page. It should be a
# `tabPanel()` with a title "Introduction" to represent the first tab.
# This layout will contain the following elements:
intro_panel <- tabPanel(
# A `titlePanel()` with the text "Income Inequality"
title = "Introduction",
titlePanel("Income Inequality"),
# A paragraph `p()` describing with the text: "The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."
p("The below diagram was created
# by the New York Times to illustrate the increasing level of inequality in
# the US."),
# An image `img()` to display. This content should have a `src` attribute of
# "inequality.png" (which will refer to the file in the `www/` folder).
img(src = "inequality.png", alt = "Example NYT chart"),
# A paragraph containing a hyperlink `a()` to the source of the article at
# https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html
p(a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html", "(source)")),
# A paragraph containing a 1-2 sentence description of what the diagram
# shows. Your paragraph should include both `strong()` and emphasized `em()`
# text.
p(strong(em("This graph shows that in more recent years, the growth income rate for low and middle class people now have little to no growth. In 1980 it used to be the low and middle class that has the most growth rate when it comes to income. Now, in 2014, those in the 99% percentile are the ones who grow their income the most.")))
runApp()
runApp()
# Exercise 2: a basic Shiny app
# Load the `shiny` package
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my_ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput(inputId = "price", label = "Price", min = 0, value = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", min = 1, value = 1),
# The word "Cost", strongly bolded
p(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
my_server <- function(input_list, output_list){
output_list$cost <- renderText({
total <- input_list$price * input_list$quantity
return(paste0("$", total))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
