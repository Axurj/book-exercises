# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/users/programming-for-data-science"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
repos_url <- content("repos_url")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
repos_url <- content(id)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
repos_url <- content(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response)
View(content_response)
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_response)
View(content_df)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response)
# Convert the content variable from a JSON string into a data frame.
content_df <- flatten(content_response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_response)
# Convert the content variable from a JSON string into a data frame.
content_df <- flatten(fromJSON(content_response))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response)
# Convert the content variable from a JSON string into a data frame.
content_df <- data.frame(content_response)
# Convert the content variable from a JSON string into a data frame.
content_df <- names(content_response)
View(content_df)
# Convert the content variable from a JSON string into a data frame.
content_names <- names(content_response)
print(content_df)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
content_names <- fromJSON(content_response)
print(content_names)
is.data.frame(content_names)
content_df <- data.frame(content_names)
content_df <- data.frame(content_names)
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
content_names <- fromJSON(content_response)
content_df <- data.frame(content_names)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_response <- content(response, type = "text")
# Convert the content variable from a JSON string into a data frame.
content_names <- fromJSON(content_response)
content_df <- data.frame(content_names)
# How many (public) repositories does the organization have?
View(content_df)
# How many (public) repositories does the organization have?
content_df %>%
content_df %>%
filter(private == "FALSE") %>%
nrow()
public_repo_num <- content_df %>%
filter(private == "FALSE") %>%
nrow()
library("dyplr")
library(dplyr)
public_repo_num <- content_df %>%
filter(private == "FALSE") %>%
nrow()
print(public_repo_num)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_end_point <- GET(/search/repositories)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_end_point <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- content(GET(base_uri, search_end_point))
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- content(GET(base_uri, search_end_point), type = "text")
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "name")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(base_uri, query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(base_uri, query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_name <- content(name_query, type = "text")
list_name <- fromJSON(response_name)
name_df <- data.frame(list_name)
View(name_df)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(paste0(base_uri, query = query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(paste0(base_uri, query = query_params))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_end_point <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "name")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(paste0(base_uri, query = query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(paste0(base_uri), query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
name_query <- GET(paste0(base_uri, search_end_point), query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_name <- content(name_query, type = "text")
list_name <- fromJSON(response_name)
name_df <- data.frame(list_name)
View(name_df)
list_name <- fromJSON(response_name)
View(list_name)
list_name <- fromJSON(response_name)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
colnames(list_name)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
names(list_name$total_count)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
list_name$total_count
# What are the full names of the top 5 repos in the search results?
list_name[["items"]]
# What are the full names of the top 5 repos in the search results?
list_name[["items"]][["name"]]
# What are the full names of the top 5 repos in the search results?
list_name[["items"]][["name"]][[1:5]]
# What are the full names of the top 5 repos in the search results?
list_name[["items"]][["name"]][1:5]
# What are the full names of the top 5 repos in the search results?
list_name[["items"]][["name"]]head(5)
