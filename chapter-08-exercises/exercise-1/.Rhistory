# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
View(meals)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(my_breakfast, my_lunch, dinner)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("brocoli", "rice", "curry")
meals <- list(my_breakfast, my_lunch, dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals[3]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[2]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
ok
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1],meals[2])
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("brocoli", "rice", "curry")
meals <- list(my_breakfast, my_lunch, dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals[3]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[[2]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1],meals[2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("brocoli", "rice", "curry")
meals <- list(my_breakfast, my_lunch, dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1],meals[2])
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("brocoli", "rice", "curry")
meals <- list(my_breakfast, my_lunch, dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
length(meals$breakfast)
length(meals$dinner)
length(meals$lunch)
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bread", "milk", "fruit")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("fried rice", "oranges", "cookies")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
dinner <- c("brocoli", "rice", "curry")
meals <- list(my_breakfast, my_lunch, dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
print(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[c("breakfast", "lunch")]
print(early_meals)
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
length(meals$breakfast)
length(meals$dinner)
length(meals$lunch)
lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector) {
#adds pizza & returns pizza
new_vector <- c(meal_vector, "pizza")
return(new_vector)
}
add_pizza(c("nachos"))
# combining vectors: c(c("a", "b"), "c")
# Create a vector `better_meals` that is all your meals, but with pizza!
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
install.packages("stringr")
#install.packages("stringr")    This was commmented out so I dont accidentally do this again.
library("stringr")
library("stringr")
sentence <- "The quick brown fox jumped over the lazy dog"
# Get words 2 through 4 of the sentence
word(sentence,
2
,
4
)
# "quick brown fox"
# Get words 2 through 4 of the sentence
word(sentence, 2, 4)
today <- "2020-01-21" # a string, human representation
today_date <- as.Date(today) # a computer representation
print(today_date) # "2020-01-21", R prints in human-view
as.numeric(today_date)
as.Date(18282, origin = "1970-01-01")
today_date + 2
