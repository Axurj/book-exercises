# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- Seattle
# Assign your name to the variable `my_name`
my_name <- Jaye
# Assign your height (in inches) to a variable `my_height`
my_height <- 60 #inches int
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 2000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
if(total_cost > 1000){
too_expensive <- TRUE
} else {
too_expensive <- FALSE
}
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Jaye Cheng"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
paste(name_length, my_name)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
# Make the `now_doing` variable upper case
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
# Divide each number by the square root of 201 and save the new value in the
# original variable
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Jaye Cheng"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
paste(name_length, my_name)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
# Divide each number by the square root of 201 and save the new value in the
# original variable
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Jaye Cheng"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
paste(name_length, my_name)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 8
fav_2 <- 4
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / (sqrt(201))
fav_2 <- fav_2 / (sqrt(201))
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 8
fav_2 <- 4
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / (sqrt(201))
fav_2 <- fav_2 / (sqrt(201))
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1,round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
add_three <- input_value + 3
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
add_three <- input_value + 3
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
input_value <- 2
add_three <- function(input_value) {
return(input_value + 3)
}
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# =====================================
# title: INFO 201 Functions Demo
# author: [INSERT YOUR NAME HERE]
# date: January 14, 2020
# =====================================
#
#   In this demo, we will cover:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
## Example 1. Earnings Calculator -----------------------------------------------
#
# We have the following R script
hours <-35 # 35 hours were worked this week
pay_rate <- 12  # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function returned?
#
# **Answer:** earnings
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** we need to call it so that we can reconize and change those values later
# parameters/arguments are wrong
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings(10, 12)
print(employee1_earnings)
#
# We can call calculate_earnings() to calculate the earnings of employee 2 who worked 40 hours this week and earns $22/hr.
#
# Calling function 'calculate earnings' for employee 2
employee2_earnings <- calculate_earnings(40, 22)
print(employee2_earnings)
### 1.3 Reviewing Common Misconceptions -------------------------------------------
# **Question 3.** Think, pair, share - Why would the following function not work?
#
# ***Hint:*** The error message returned here is "unexpected numeric constant"
#
# **Answer:** ______________________________________
#
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
# **Question 4.** Think, pair, share - Similarly, why would the following function not work?
#
# ***Hint:*** Error message returned is error in calculate_earnings(hours, pay_rate) : object 'hours' not found.
#
# **Answer:** hours and pay_rate not specificied in the function("here")
employee3_earnings <- calculate_earnings(10, 12)
print(employee3_earnings)
### 1.4 return() vs. print() ----------------------------------------------------------
#
# Now, what if I want to use the output that the function returns without having to use print() each time.
#
# Defining function called 'calculate_earnings_v2'
calculate_earnings_v2 <- function(hours, pay_rate) {
earnings <- hours * pay_rate # You have to assign a returned value to a variable to use it
print(earnings) # printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
## Example 2. Sentence Generator --------------------------------------------------------
#
# We can create a function to generate a sentence with the name of the last documentary you watched.
watch <- function(documentary) {
result <- print(paste("The last documentary I watched is called", documentary))
return(result)
}
current_show <- watch("Free Solo")
print(current_show)
# Here, we created a function called 'watch()'.
# It takes one argument 'documentary' and attaches it to the end of the sentence "The last documentary that I watched is called".
#
# **Question 5.** What could be better in the following function?
#
# **Answer:** too specific, want a more general name
watch <- function(Icarus) {
result <- print(paste("The last documentary I watched is called", Icarus))
return(result)
}
### 2.1 Functions with if-else statements
#
# Suppose we want a function that can classify your shows into either movies or tv-series based on its duration.
# For tv-series duration means the average run-time, in minutes, of an episode.
# The average movie duration is ~ 80 minutes.
# Using this information we can write the following function:
#
classify_shows <- function(show_name, minutes) {
title <- show_name
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(title, minutes))
# c = collect both data points
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** 1) "This show is likely a movie"
#               2) "This show is likely a TV series"
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
# END
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three + 7
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three + 7
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three + 7
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three() + 7
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- function(add_three) + 7
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + 2 ) / 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + 2 ) / 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + 2 ) * 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + 2 ) * 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 0)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + inches) * 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + 2 ) * 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 0)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + inches) * 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + inches) * 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 0)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + inches) * 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + inches) * 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(4, 0)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
input_value <- 2
value <- input_value + 3
add_three <- function(input_value) {
value <- input_value + 3
return(value)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
feet <- 5
inches <- 2
meters <- ((feet * 12) + inches) * 0.0254
imperial_to_metric <- function(feet, inches) {
meters <- ((feet * 12) + inches) * 0.0254
return(meters)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 0)
